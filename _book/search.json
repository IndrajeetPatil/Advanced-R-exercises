[{"path":"index.html","id":"about","chapter":"About","heading":"About","text":"solutions exercises Hadley Wickham’s Advanced R book:\nhttps://adv-r.hadley.nz/official solutions, look book:\nhttps://advanced-r-solutions.rbind.io/","code":""},{"path":"preface.html","id":"preface","chapter":"Preface","heading":"Preface","text":"exercises.","code":""},{"path":"introduction.html","id":"introduction","chapter":"1 Introduction","heading":"1 Introduction","text":"exercises.","code":""},{"path":"names-and-values.html","id":"names-and-values","chapter":"2 Names and values","heading":"2 Names and values","text":"","code":""},{"path":"names-and-values.html","id":"exercises","chapter":"2 Names and values","heading":"2.2.2 Exercises","text":"","code":""},{"path":"names-and-values.html","id":"q1.-explain-the-relationship","chapter":"2 Names and values","heading":"Q1. Explain the relationship","text":"variable names actively bound value.","code":"\na <- 1:10\nb <- a\nc <- b\nd <- 1:10\nlibrary(lobstr)\n\nobj_addr(a)\n#> [1] \"0x2a02ce90\"\nobj_addr(b)\n#> [1] \"0x2a02ce90\"\nobj_addr(c)\n#> [1] \"0x2a02ce90\"\nobj_addr(d)\n#> [1] \"0x2a12bb10\""},{"path":"names-and-values.html","id":"q2.-function-object-address","chapter":"2 Names and values","heading":"Q2. Function object address","text":"Following code verifies indeed calls point underlying function object.","code":"\nobj_addr(mean)\n#> [1] \"0x19591a38\"\nobj_addr(base::mean)\n#> [1] \"0x19591a38\"\nobj_addr(get(\"mean\"))\n#> [1] \"0x19591a38\"\nobj_addr(evalq(mean))\n#> [1] \"0x19591a38\"\nobj_addr(match.fun(\"mean\"))\n#> [1] \"0x19591a38\""},{"path":"names-and-values.html","id":"q3.-converting-non-syntactic-names","chapter":"2 Names and values","heading":"Q3. Converting non-syntactic names","text":"conversion non-syntactic names syntactic ones can sometimes corrupt data. datasets may require non-syntactic names.suppress behavior, one can set check.names = FALSE.","code":""},{"path":"names-and-values.html","id":"q4.-behavior-of-make.names","chapter":"2 Names and values","heading":"Q4. Behavior of make.names()","text":"just prepends X non-syntactic names invalid characters (like @) translated ..","code":"\nmake.names(c(\"123abc\", \"@me\", \"_yu\", \"  gh\", \"else\"))\n#> [1] \"X123abc\" \"X.me\"    \"X_yu\"    \"X..gh\"   \"else.\""},{"path":"names-and-values.html","id":"q5.-why-is-.123e1-not-a-syntactic-name","chapter":"2 Names and values","heading":"Q5. Why is .123e1 not a syntactic name?","text":"parsed number.","code":"\n.123e1 < 1\n#> [1] FALSE"},{"path":"names-and-values.html","id":"exercises-1","chapter":"2 Names and values","heading":"2.3.6 Exercises","text":"","code":""},{"path":"names-and-values.html","id":"q1.-usefulness-of-tracemem","chapter":"2 Names and values","heading":"Q1. Usefulness of tracemem()","text":"tracemem() traces copying objects R, since object created assigned name, nothing trace.","code":"\ntracemem(1:10)\n#> [1] \"<000000002ADB5240>\""},{"path":"names-and-values.html","id":"q2.-why-two-copies-when-you-run-this-code","chapter":"2 Names and values","heading":"Q2. Why two copies when you run this code?","text":"4 double - integer (4L) - modified place.Try integer:still produces copy, Solutions manual:Please aware running code RStudio result additional copies reference environment pane.","code":"\nx <- c(1L, 2L, 3L)\ntracemem(x)\n#> [1] \"<000000002E1B7238>\"\n\nx[[3]] <- 4\n#> tracemem[0x000000002e1b7238 -> 0x000000002e1d0418]: eval eval withVisible withCallingHandlers handle timing_fn evaluate_call <Anonymous> evaluate in_dir eng_r block_exec call_block process_group.block process_group withCallingHandlers process_file <Anonymous> <Anonymous> do.call eval eval eval eval eval.parent local \n#> tracemem[0x000000002e1d0418 -> 0x000000002e1e4748]: eval eval withVisible withCallingHandlers handle timing_fn evaluate_call <Anonymous> evaluate in_dir eng_r block_exec call_block process_group.block process_group withCallingHandlers process_file <Anonymous> <Anonymous> do.call eval eval eval eval eval.parent local\nx <- c(1L, 2L, 3L)\ntracemem(x)\n#> [1] \"<000000002E233F90>\"\n\nx[[3]] <- 4L\n#> tracemem[0x000000002e233f90 -> 0x000000002e253f20]: eval eval withVisible withCallingHandlers handle timing_fn evaluate_call <Anonymous> evaluate in_dir eng_r block_exec call_block process_group.block process_group withCallingHandlers process_file <Anonymous> <Anonymous> do.call eval eval eval eval eval.parent local"},{"path":"names-and-values.html","id":"q3.-study-relationship","chapter":"2 Names and values","heading":"Q3. Study relationship","text":"","code":"\na <- 1:10\nb <- list(a, a)\nc <- list(b, a, 1:10)\n\nref(a, b, c)\n#> [1:0x2b4c7b60] <int> \n#>  \n#> o [2:0x2e2ae388] <list> \n#> +-[1:0x2b4c7b60] \n#> \\-[1:0x2b4c7b60] \n#>  \n#> o [3:0x2e2d12c8] <list> \n#> +-[2:0x2e2ae388] \n#> +-[1:0x2b4c7b60] \n#> \\-[4:0x2b5681c0] <int>"},{"path":"names-and-values.html","id":"q4.","chapter":"2 Names and values","heading":"Q4.","text":"","code":"\nx <- list(1:10)\nobj_addr(x)\n#> [1] \"0x29c441e0\"\n\nx[[2]] <- x\n\nx\n#> [[1]]\n#>  [1]  1  2  3  4  5  6  7  8  9 10\n#> \n#> [[2]]\n#> [[2]][[1]]\n#>  [1]  1  2  3  4  5  6  7  8  9 10\n\nobj_addr(x)\n#> [1] \"0x19685178\"\n\nref(x)\n#> o [1:0x19685178] <list> \n#> +-[2:0x1832dbb0] <int> \n#> \\-o [3:0x29c441e0] <list> \n#>   \\-[2:0x1832dbb0]"},{"path":"s3.html","id":"s3","chapter":"3 S3","heading":"3 S3","text":"","code":""},{"path":"s3.html","id":"exercise-13.2.1","chapter":"3 S3","heading":"Exercise 13.2.1","text":"","code":""},{"path":"s3.html","id":"q1.-differences-between-t.test-and-t.data.frame","chapter":"3 S3","heading":"Q1. Differences between t.test and t.data.frame","text":"t.test() generic function perform t-test.t.test() generic function perform t-test.t.data.frame method generic t() (matrix transform function) dispatched data.frame objects need transformed.t.data.frame method generic t() (matrix transform function) dispatched data.frame objects need transformed.","code":"\nlibrary(sloop)\n\n# function type\nftype(t.test)\n#> [1] \"S3\"      \"generic\"\nftype(t.data.frame)\n#> [1] \"S3\"     \"method\""},{"path":"s3.html","id":"q2.-base-r-function-with-.","chapter":"3 S3","heading":"Q2. base-R function with .","text":".equal().* functions like .data.frame()install.packages()\netc.example,","code":"\nftype(as.data.frame)\n#> [1] \"S3\"      \"generic\""},{"path":"s3.html","id":"q3.-what-does-as.data.frame.data.frame-do","chapter":"3 S3","heading":"Q3. What does as.data.frame.data.frame() do?","text":"’s method generic .data.frame().Less confusing: asDataFrame.DataFrame().","code":""},{"path":"s3.html","id":"q4.-difference-in-behavior","chapter":"3 S3","heading":"Q4. Difference in behavior","text":"unclassing, S3 dispatches .Date method, .numeric method.BeforeAfter","code":"\nsome_days <- as.Date(\"2017-01-31\") + sample(10, 5)\n\nsome_days\n#> [1] \"2017-02-01\" \"2017-02-09\" \"2017-02-07\" \"2017-02-03\"\n#> [5] \"2017-02-06\"\n\ns3_dispatch(mean(some_days))\n#> => mean.Date\n#>  * mean.default\n\nmean(some_days)\n#> [1] \"2017-02-05\"\nunclass(some_days)\n#> [1] 17198 17206 17204 17200 17203\n\nmean(unclass(some_days))\n#> [1] 17202.2\n\ns3_dispatch(mean(unclass(some_days)))\n#>    mean.double\n#>    mean.numeric\n#> => mean.default"},{"path":"s3.html","id":"q5.-object-properties","chapter":"3 S3","heading":"Q5. Object properties","text":"","code":"\nx <- ecdf(rpois(100, 10))\nx\n#> Empirical CDF \n#> Call: ecdf(rpois(100, 10))\n#>  x[1:15] =      2,      4,      5,  ...,     17,     18\n\notype(x)\n#> [1] \"S3\"\n\nattributes(x)\n#> $class\n#> [1] \"ecdf\"     \"stepfun\"  \"function\"\n#> \n#> $call\n#> ecdf(rpois(100, 10))\n\ns3_class(x)\n#> [1] \"ecdf\"     \"stepfun\"  \"function\""},{"path":"s3.html","id":"q6.-object-properties","chapter":"3 S3","heading":"Q6. Object properties","text":"","code":"\nx <- table(rpois(100, 5))\nx\n#> \n#>  1  2  3  4  5  6  7  8  9 10 11 12 13 \n#>  1  5 16 18 18 17  8  5  4  4  1  2  1\n\notype(x)\n#> [1] \"S3\"\n\nattributes(x)\n#> $dim\n#> [1] 13\n#> \n#> $dimnames\n#> $dimnames[[1]]\n#>  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\"\n#> [12] \"12\" \"13\"\n#> \n#> \n#> $class\n#> [1] \"table\"\n\ns3_class(x)\n#> [1] \"table\""},{"path":"r6.html","id":"r6","chapter":"4 R6","heading":"4 R6","text":"","code":""},{"path":"r6.html","id":"exercise-14.2.6","chapter":"4 R6","heading":"Exercise 14.2.6","text":"","code":""},{"path":"r6.html","id":"q1.-r6-class-for-bank-account","chapter":"4 R6","heading":"Q1. R6 class for bank account","text":"Create superclass make sure works expected.Create subclass errors attempt overdrawCreate subclass charges fee overdraw","code":"\nlibrary(R6)\n\n# define the needed class\nbankAccount <- R6::R6Class(\n  \"bankAccount\",\n  public = list(\n    # fields -----------------------\n    balance = NA,\n    name = NA,\n\n    # methods ----------------------\n    initialize = function(name = NULL, balance) {\n      self$validate(balance)\n\n      self$name <- name\n      self$balance <- balance\n    },\n    deposit = function(amount) {\n      self$validate(amount)\n      cat(\"Current balance is: \", self$balance, \"\\n\", sep = \"\")\n      cat(\"And you are depositing: \", amount)\n      self$balance <- self$balance + amount\n      invisible(self)\n    },\n    withdraw = function(amount) {\n      self$validate(amount)\n      cat(\"Current balance is: \", self$balance, \"\\n\", sep = \"\")\n      cat(\"And you are withdrawing: \", amount, \"\\n\", sep = \"\")\n      self$balance <- self$balance - amount\n      invisible(self)\n    },\n    validate = function(amount) {\n      stopifnot(is.numeric(amount), amount >= 0)\n    },\n    print = function() {\n      cat(\"Dear \", self$name, \", your balance is: \", self$balance, sep = \"\")\n      invisible(self)\n    }\n  )\n)\n\n# create an instance of an object\nindra <- bankAccount$new(name = \"Indra\", balance = 100)\n\nindra\n#> Dear Indra, your balance is: 100\n\n# do deposits and withdrawals to see if the balance changes\nindra$deposit(20)\n#> Current balance is: 100\n#> And you are depositing:  20\n\nindra\n#> Dear Indra, your balance is: 120\n\nindra$withdraw(10)\n#> Current balance is: 120\n#> And you are withdrawing: 10\n\nindra\n#> Dear Indra, your balance is: 110\n\n# make sure input validation checks work\nindra$deposit(-20)\n#> Error in self$validate(amount): amount >= 0 is not TRUE\nindra$deposit(\"pizza\")\n#> Error in self$validate(amount): is.numeric(amount) is not TRUE\nindra$withdraw(-54)\n#> Error in self$validate(amount): amount >= 0 is not TRUE\nAnne <- bankAccount$new(name = \"Anne\", balance = -45)\n#> Error in self$validate(balance): amount >= 0 is not TRUE\nbankAccountStrict <- R6::R6Class(\n  \"bankAccountStrict\",\n  inherit = bankAccount,\n  public = list(\n    withdraw = function(amount) {\n      # use method from superclass\n      super$withdraw(amount)\n\n      if (self$balance < 0) {\n        invisible(self)\n        stop(\n          cat(\"\\nYou are trying to withdraw more that your balance.\\n\"),\n          cat(\"I'm sorry, \", self$name, \", I'm afraid I can't do that.\", sep = \"\"),\n          call. = FALSE\n        )\n      }\n    }\n  )\n)\n\n# create an instance of an object\nPritesh <- bankAccountStrict$new(name = \"Pritesh\", balance = 100)\n\nPritesh\n#> Dear Pritesh, your balance is: 100\n\n# do deposits and withdrawals to see if the balance changes\nPritesh$deposit(20)\n#> Current balance is: 100\n#> And you are depositing:  20\n\nPritesh\n#> Dear Pritesh, your balance is: 120\n\nPritesh$withdraw(150)\n#> Current balance is: 120\n#> And you are withdrawing: 150\n#> \n#> You are trying to withdraw more that your balance.\n#> I'm sorry, Pritesh, I'm afraid I can't do that.\n#> Error:\n\nPritesh\n#> Dear Pritesh, your balance is: -30\n\n# make sure input validation checks work\nPritesh$deposit(-20)\n#> Error in self$validate(amount): amount >= 0 is not TRUE\nPritesh$deposit(\"pizza\")\n#> Error in self$validate(amount): is.numeric(amount) is not TRUE\nPritesh$withdraw(-54)\n#> Error in self$validate(amount): amount >= 0 is not TRUE\nPritesh <- bankAccountStrict$new(name = \"Pritesh\", balance = -45)\n#> Error in self$validate(balance): amount >= 0 is not TRUE\nbankAccountFee <- R6::R6Class(\n  \"bankAccountFee\",\n  inherit = bankAccount,\n  public = list(\n    withdraw = function(amount) {\n      # use method from superclass\n      super$withdraw(amount)\n      \n      if (self$balance < 0) {\n        cat(\"\\nI am charging you 10 euros for overdrawing.\\n\")\n        self$balance = self$balance - 10\n        invisible(self)\n      }\n    }\n  )\n)\n\n# create an instance of an object\nMangesh <- bankAccountFee$new(name = \"Mangesh\", balance = 100)\n\nMangesh\n#> Dear Mangesh, your balance is: 100\n\n# do deposits and withdrawals to see if the balance changes\nMangesh$deposit(20)\n#> Current balance is: 100\n#> And you are depositing:  20\n\nMangesh\n#> Dear Mangesh, your balance is: 120\n\nMangesh$withdraw(150)\n#> Current balance is: 120\n#> And you are withdrawing: 150\n#> \n#> I am charging you 10 euros for overdrawing.\n\nMangesh\n#> Dear Mangesh, your balance is: -40\n\n# make sure input validation checks work\nMangesh$deposit(-20)\n#> Error in self$validate(amount): amount >= 0 is not TRUE\nMangesh$deposit(\"pizza\")\n#> Error in self$validate(amount): is.numeric(amount) is not TRUE\nMangesh$withdraw(-54)\n#> Error in self$validate(amount): amount >= 0 is not TRUE\nMangesh <- bankAccountFee$new(name = \"Mangesh\", balance = -45)\n#> Error in self$validate(balance): amount >= 0 is not TRUE"}]
