[{"path":"index.html","id":"about","chapter":"About","heading":"About","text":"solutions exercises Hadley Wickham’s Advanced R book:https://adv-r.hadley.nz/official solutions, look book:https://advanced-r-solutions.rbind.io/","code":""},{"path":"names-and-values.html","id":"names-and-values","chapter":"1 Names and values","heading":"1 Names and values","text":"","code":""},{"path":"names-and-values.html","id":"exercises","chapter":"1 Names and values","heading":"1.1 2.2.2 Exercises","text":"","code":""},{"path":"names-and-values.html","id":"q1.-explain-the-relationship","chapter":"1 Names and values","heading":"Q1. Explain the relationship","text":"variable names actively bound value.","code":"\na <- 1:10\nb <- a\nc <- b\nd <- 1:10\nlibrary(lobstr)\n\nobj_addr(a)\n#> [1] \"0x2a119f38\"\nobj_addr(b)\n#> [1] \"0x2a119f38\"\nobj_addr(c)\n#> [1] \"0x2a119f38\"\nobj_addr(d)\n#> [1] \"0x2a214db8\""},{"path":"names-and-values.html","id":"q2.-function-object-address","chapter":"1 Names and values","heading":"Q2. Function object address","text":"Following code verifies indeed calls point underlying function object.","code":"\nobj_addr(mean)\n#> [1] \"0x19591d28\"\nobj_addr(base::mean)\n#> [1] \"0x19591d28\"\nobj_addr(get(\"mean\"))\n#> [1] \"0x19591d28\"\nobj_addr(evalq(mean))\n#> [1] \"0x19591d28\"\nobj_addr(match.fun(\"mean\"))\n#> [1] \"0x19591d28\""},{"path":"names-and-values.html","id":"q3.-converting-non-syntactic-names","chapter":"1 Names and values","heading":"Q3. Converting non-syntactic names","text":"conversion non-syntactic names syntactic ones can sometimes corrupt data. datasets may require non-syntactic names.suppress behavior, one can set check.names = FALSE.","code":""},{"path":"names-and-values.html","id":"q4.-behavior-of-make.names","chapter":"1 Names and values","heading":"Q4. Behavior of make.names()","text":"just prepends X non-syntactic names invalid characters (like @) translated ..","code":"\nmake.names(c(\"123abc\", \"@me\", \"_yu\", \"  gh\", \"else\"))\n#> [1] \"X123abc\" \"X.me\"    \"X_yu\"    \"X..gh\"   \"else.\""},{"path":"names-and-values.html","id":"q5.-why-is-.123e1-not-a-syntactic-name","chapter":"1 Names and values","heading":"Q5. Why is .123e1 not a syntactic name?","text":"parsed number.","code":"\n.123e1 < 1\n#> [1] FALSE"},{"path":"names-and-values.html","id":"exercises-1","chapter":"1 Names and values","heading":"1.2 2.3.6 Exercises","text":"","code":""},{"path":"names-and-values.html","id":"q1.-usefulness-of-tracemem","chapter":"1 Names and values","heading":"Q1. Usefulness of tracemem()","text":"tracemem() traces copying objects R, since object created assigned name, nothing trace.","code":"\ntracemem(1:10)\n#> [1] \"<000000002AEC5388>\""},{"path":"names-and-values.html","id":"q2.-why-two-copies-when-you-run-this-code","chapter":"1 Names and values","heading":"Q2. Why two copies when you run this code?","text":"4 double - integer (4L) - modified place.Try integer:still produces copy, Solutions manual:Please aware running code RStudio result additional copies reference environment pane.","code":"\nx <- c(1L, 2L, 3L)\ntracemem(x)\n#> [1] \"<000000002E1F9698>\"\n\nx[[3]] <- 4\n#> tracemem[0x000000002e1f9698 -> 0x000000002e217708]: eval eval withVisible withCallingHandlers handle timing_fn evaluate_call <Anonymous> evaluate in_dir eng_r block_exec call_block process_group.block process_group withCallingHandlers process_file <Anonymous> <Anonymous> do.call eval eval eval eval eval.parent local \n#> tracemem[0x000000002e217708 -> 0x000000002e222c78]: eval eval withVisible withCallingHandlers handle timing_fn evaluate_call <Anonymous> evaluate in_dir eng_r block_exec call_block process_group.block process_group withCallingHandlers process_file <Anonymous> <Anonymous> do.call eval eval eval eval eval.parent local\nx <- c(1L, 2L, 3L)\ntracemem(x)\n#> [1] \"<000000002E26C980>\"\n\nx[[3]] <- 4L\n#> tracemem[0x000000002e26c980 -> 0x000000002e29d240]: eval eval withVisible withCallingHandlers handle timing_fn evaluate_call <Anonymous> evaluate in_dir eng_r block_exec call_block process_group.block process_group withCallingHandlers process_file <Anonymous> <Anonymous> do.call eval eval eval eval eval.parent local"},{"path":"names-and-values.html","id":"q3.-study-relationship","chapter":"1 Names and values","heading":"Q3. Study relationship","text":"","code":"\na <- 1:10\nb <- list(a, a)\nc <- list(b, a, 1:10)\n\nref(a)\n#> [1:0x19406d50] <int>\n\nref(b)\n#> o [1:0x25b5b9e0] <list> \n#> +-[2:0x19406d50] <int> \n#> \\-[2:0x19406d50]\n\nref(c)\n#> o [1:0x29d52648] <list> \n#> +-o [2:0x25b5b9e0] <list> \n#> | +-[3:0x19406d50] <int> \n#> | \\-[3:0x19406d50] \n#> +-[3:0x19406d50] \n#> \\-[4:0x192b12f0] <int>"},{"path":"names-and-values.html","id":"q4.-list-inside-another-list","chapter":"1 Names and values","heading":"Q4. List inside another list","text":"Figure :\nhttps://advanced-r-solutions.rbind.io/images/names_values/copy_on_modify_fig2.png","code":"\nx <- list(1:10)\nx\n#> [[1]]\n#>  [1]  1  2  3  4  5  6  7  8  9 10\nobj_addr(x)\n#> [1] \"0x29f6cea8\"\n\nx[[2]] <- x\nx\n#> [[1]]\n#>  [1]  1  2  3  4  5  6  7  8  9 10\n#> \n#> [[2]]\n#> [[2]][[1]]\n#>  [1]  1  2  3  4  5  6  7  8  9 10\nobj_addr(x)\n#> [1] \"0x19331ce0\"\n\nref(x)\n#> o [1:0x19331ce0] <list> \n#> +-[2:0x29ce79b0] <int> \n#> \\-o [3:0x29f6cea8] <list> \n#>   \\-[2:0x29ce79b0]"},{"path":"names-and-values.html","id":"exercises-2","chapter":"1 Names and values","heading":"1.3 2.4.1 Exercises","text":"","code":""},{"path":"names-and-values.html","id":"q1.-object-size-difference-between-base-and-lobstr","chapter":"1 Names and values","heading":"Q1. Object size difference between {base} and {lobstr}","text":"function…detect elements list shared.","code":"\ny <- rep(list(runif(1e4)), 100)\n\nobject.size(y)\n#> 8005648 bytes\n\nobj_size(y)\n#> 80,896 B"},{"path":"names-and-values.html","id":"q2.-misleading-object-size","chapter":"1 Names and values","heading":"Q2. Misleading object size","text":"functions externally created objects R, always available, doesn’t make much sense measure size.Nevertheless, ’s still interesting addition size list objects.","code":"\nfuns <- list(mean, sd, var)\nobj_size(funs)\n#> 17,608 B\nobj_size(mean)\n#> 1,184 B\nobj_size(sd)\n#> 4,480 B\nobj_size(var)\n#> 12,472 B\n\nobj_size(mean) + obj_size(sd) + obj_size(var)\n#> 18,136 B"},{"path":"names-and-values.html","id":"q3.-predict-object-sizes","chapter":"1 Names and values","heading":"Q3. Predict object sizes","text":"","code":"\na <- runif(1e6)\nobj_size(a)\n#> 8,000,048 B\n\nb <- list(a, a)\nobj_size(b)\n#> 8,000,112 B\nobj_size(a, b)\n#> 8,000,112 B\n\nb[[1]][[1]] <- 10\nobj_size(b)\n#> 16,000,160 B\nobj_size(a, b)\n#> 16,000,160 B\n\nb[[2]][[1]] <- 10\nobj_size(b)\n#> 16,000,160 B\nobj_size(a, b)\n#> 24,000,208 B"},{"path":"names-and-values.html","id":"exercises-3","chapter":"1 Names and values","heading":"1.4 2.5.3 Exercises","text":"","code":""},{"path":"names-and-values.html","id":"q1.-why-not-a-circular-list","chapter":"1 Names and values","heading":"Q1. Why not a circular list?","text":"Copy--modify prevents creation circular list.","code":"\nx <- list()\n\nobj_addr(x)\n#> [1] \"0x2b37b6f8\"\n\ntracemem(x)\n#> [1] \"<000000002B37B6F8>\"\n\nx[[1]] <- x\n#> tracemem[0x000000002b37b6f8 -> 0x000000002b482310]: eval eval withVisible withCallingHandlers handle timing_fn evaluate_call <Anonymous> evaluate in_dir eng_r block_exec call_block process_group.block process_group withCallingHandlers process_file <Anonymous> <Anonymous> do.call eval eval eval eval eval.parent local\n\nobj_addr(x[[1]])\n#> [1] \"0x2b37b6f8\""},{"path":"names-and-values.html","id":"q2.-why-are-loops-so-slow","chapter":"1 Names and values","heading":"Q2. Why are loops so slow","text":"","code":"\nlibrary(bench)"},{"path":"names-and-values.html","id":"q3.-tracemem-on-an-environment","chapter":"1 Names and values","heading":"Q3. tracemem() on an environment","text":"doesn’t work documentation makes clear :useful trace NULL, environments, promises, weak references, external pointer objects, duplicated","code":"\ne <- rlang::env(a = 1, b = \"3\")\ntracemem(e)\n#> Error in tracemem(e): 'tracemem' is not useful for promise and environment objects"},{"path":"vectors.html","id":"vectors","chapter":"2 Vectors","heading":"2 Vectors","text":"","code":""},{"path":"vectors.html","id":"exercise-3.2.5","chapter":"2 Vectors","heading":"2.1 Exercise 3.2.5","text":"","code":""},{"path":"vectors.html","id":"q1.-create-raw-and-complex-scalars","chapter":"2 Vectors","heading":"Q1. Create raw and complex scalars","text":"raw type holds raw bytes. example,can use also figure encoding issues (scalars):Complex vectors can used represent (surprise!) complex numbers.Example complex scalar:","code":"\nx <- \"A string\"\n\n(y <- charToRaw(x))\n#> [1] 41 20 73 74 72 69 6e 67\n\ntypeof(y)\n#> [1] \"raw\"\ncharToRaw(\"\\\"\")\n#> [1] 22\ncharToRaw(\"”\")\n#> [1] 94\n(x <- complex(length.out = 1, real = 1, imaginary = 8))\n#> [1] 1+8i\n\ntypeof(x)\n#> [1] \"complex\""},{"path":"vectors.html","id":"q2.-vector-coercion-rules","chapter":"2 Vectors","heading":"Q2. Vector coercion rules","text":"Usually, general type take precedence.Let’s try examples.","code":"\nc(1, FALSE)\n#> [1] 1 0\n\nc(\"a\", 1)\n#> [1] \"a\" \"1\"\n\nc(TRUE, 1L)\n#> [1] 1 1\nc(1.0, 1L)\n#> [1] 1 1\n\nc(1.0, \"1.0\")\n#> [1] \"1\"   \"1.0\"\n\nc(TRUE, \"1.0\")\n#> [1] \"TRUE\" \"1.0\""},{"path":"vectors.html","id":"q3.-comparisons-between-different-types","chapter":"2 Vectors","heading":"Q3. Comparisons between different types","text":"coercion vectors reveal comparisons return results .","code":"\n1 == \"1\"\n#> [1] TRUE\n\nc(1, \"1\")\n#> [1] \"1\" \"1\"\n-1 < FALSE\n#> [1] TRUE\n\nc(-1, FALSE)\n#> [1] -1  0\n\"one\" < 2\n#> [1] FALSE\n\nc(\"one\", 2)\n#> [1] \"one\" \"2\"\n\nsort(c(\"one\", 2))\n#> [1] \"2\"   \"one\""},{"path":"s3.html","id":"s3","chapter":"3 S3","heading":"3 S3","text":"","code":""},{"path":"s3.html","id":"exercise-13.2.1","chapter":"3 S3","heading":"3.1 Exercise 13.2.1","text":"","code":""},{"path":"s3.html","id":"q1.-differences-between-t.test-and-t.data.frame","chapter":"3 S3","heading":"Q1. Differences between t.test and t.data.frame","text":"t.test() generic function perform t-test.t.test() generic function perform t-test.t.data.frame method generic t() (matrix transform function) dispatched data.frame objects need transformed.t.data.frame method generic t() (matrix transform function) dispatched data.frame objects need transformed.","code":"\nlibrary(sloop)\n\n# function type\nftype(t.test)\n#> [1] \"S3\"      \"generic\"\nftype(t.data.frame)\n#> [1] \"S3\"     \"method\""},{"path":"s3.html","id":"q2.-base-r-function-with-.","chapter":"3 S3","heading":"Q2. base-R function with .","text":".equal().* functions like .data.frame()install.packages()\netc.example,","code":"\nftype(as.data.frame)\n#> [1] \"S3\"      \"generic\""},{"path":"s3.html","id":"q3.-what-does-as.data.frame.data.frame-do","chapter":"3 S3","heading":"Q3. What does as.data.frame.data.frame() do?","text":"’s method generic .data.frame().Less confusing: asDataFrame.DataFrame().","code":""},{"path":"s3.html","id":"q4.-difference-in-behavior","chapter":"3 S3","heading":"Q4. Difference in behavior","text":"unclassing, S3 dispatches .Date method, .numeric method.BeforeAfter","code":"\nsome_days <- as.Date(\"2017-01-31\") + sample(10, 5)\n\nsome_days\n#> [1] \"2017-02-04\" \"2017-02-05\" \"2017-02-08\" \"2017-02-02\"\n#> [5] \"2017-02-01\"\n\ns3_dispatch(mean(some_days))\n#> => mean.Date\n#>  * mean.default\n\nmean(some_days)\n#> [1] \"2017-02-04\"\nunclass(some_days)\n#> [1] 17201 17202 17205 17199 17198\n\nmean(unclass(some_days))\n#> [1] 17201\n\ns3_dispatch(mean(unclass(some_days)))\n#>    mean.double\n#>    mean.numeric\n#> => mean.default"},{"path":"s3.html","id":"q5.-object-properties","chapter":"3 S3","heading":"Q5. Object properties","text":"","code":"\nx <- ecdf(rpois(100, 10))\nx\n#> Empirical CDF \n#> Call: ecdf(rpois(100, 10))\n#>  x[1:17] =      2,      3,      4,  ...,     17,     18\n\notype(x)\n#> [1] \"S3\"\n\nattributes(x)\n#> $class\n#> [1] \"ecdf\"     \"stepfun\"  \"function\"\n#> \n#> $call\n#> ecdf(rpois(100, 10))\n\ns3_class(x)\n#> [1] \"ecdf\"     \"stepfun\"  \"function\""},{"path":"s3.html","id":"q6.-object-properties","chapter":"3 S3","heading":"Q6. Object properties","text":"","code":"\nx <- table(rpois(100, 5))\nx\n#> \n#>  0  1  2  3  4  5  6  7  8  9 10 13 \n#>  1  4  7 13 20 16 17  5  8  7  1  1\n\notype(x)\n#> [1] \"S3\"\n\nattributes(x)\n#> $dim\n#> [1] 12\n#> \n#> $dimnames\n#> $dimnames[[1]]\n#>  [1] \"0\"  \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\"\n#> [12] \"13\"\n#> \n#> \n#> $class\n#> [1] \"table\"\n\ns3_class(x)\n#> [1] \"table\""},{"path":"r6.html","id":"r6","chapter":"4 R6","heading":"4 R6","text":"","code":""},{"path":"r6.html","id":"exercise-14.2.6","chapter":"4 R6","heading":"4.1 Exercise 14.2.6","text":"","code":""},{"path":"r6.html","id":"q1.-r6-class-for-bank-account","chapter":"4 R6","heading":"Q1. R6 class for bank account","text":"Create superclass make sure works expected.Create subclass errors attempt overdrawCreate subclass charges fee overdraw","code":"\nlibrary(R6)\n\n# define the needed class\nbankAccount <- R6::R6Class(\n  \"bankAccount\",\n  public = list(\n    # fields -----------------------\n    balance = NA,\n    name = NA,\n\n    # methods ----------------------\n    initialize = function(name = NULL, balance) {\n      self$validate(balance)\n\n      self$name <- name\n      self$balance <- balance\n    },\n    deposit = function(amount) {\n      self$validate(amount)\n      cat(\"Current balance is: \", self$balance, \"\\n\", sep = \"\")\n      cat(\"And you are depositing: \", amount)\n      self$balance <- self$balance + amount\n      invisible(self)\n    },\n    withdraw = function(amount) {\n      self$validate(amount)\n      cat(\"Current balance is: \", self$balance, \"\\n\", sep = \"\")\n      cat(\"And you are withdrawing: \", amount, \"\\n\", sep = \"\")\n      self$balance <- self$balance - amount\n      invisible(self)\n    },\n    validate = function(amount) {\n      stopifnot(is.numeric(amount), amount >= 0)\n    },\n    print = function() {\n      cat(\"Dear \", self$name, \", your balance is: \", self$balance, sep = \"\")\n      invisible(self)\n    }\n  )\n)\n\n# create an instance of an object\nindra <- bankAccount$new(name = \"Indra\", balance = 100)\n\nindra\n#> Dear Indra, your balance is: 100\n\n# do deposits and withdrawals to see if the balance changes\nindra$deposit(20)\n#> Current balance is: 100\n#> And you are depositing:  20\n\nindra\n#> Dear Indra, your balance is: 120\n\nindra$withdraw(10)\n#> Current balance is: 120\n#> And you are withdrawing: 10\n\nindra\n#> Dear Indra, your balance is: 110\n\n# make sure input validation checks work\nindra$deposit(-20)\n#> Error in self$validate(amount): amount >= 0 is not TRUE\nindra$deposit(\"pizza\")\n#> Error in self$validate(amount): is.numeric(amount) is not TRUE\nindra$withdraw(-54)\n#> Error in self$validate(amount): amount >= 0 is not TRUE\nAnne <- bankAccount$new(name = \"Anne\", balance = -45)\n#> Error in self$validate(balance): amount >= 0 is not TRUE\nbankAccountStrict <- R6::R6Class(\n  \"bankAccountStrict\",\n  inherit = bankAccount,\n  public = list(\n    withdraw = function(amount) {\n      # use method from superclass\n      super$withdraw(amount)\n\n      if (self$balance < 0) {\n        invisible(self)\n        stop(\n          cat(\"\\nYou are trying to withdraw more that your balance.\\n\"),\n          cat(\"I'm sorry, \", self$name, \", I'm afraid I can't do that.\", sep = \"\"),\n          call. = FALSE\n        )\n      }\n    }\n  )\n)\n\n# create an instance of an object\nPritesh <- bankAccountStrict$new(name = \"Pritesh\", balance = 100)\n\nPritesh\n#> Dear Pritesh, your balance is: 100\n\n# do deposits and withdrawals to see if the balance changes\nPritesh$deposit(20)\n#> Current balance is: 100\n#> And you are depositing:  20\n\nPritesh\n#> Dear Pritesh, your balance is: 120\n\nPritesh$withdraw(150)\n#> Current balance is: 120\n#> And you are withdrawing: 150\n#> \n#> You are trying to withdraw more that your balance.\n#> I'm sorry, Pritesh, I'm afraid I can't do that.\n#> Error:\n\nPritesh\n#> Dear Pritesh, your balance is: -30\n\n# make sure input validation checks work\nPritesh$deposit(-20)\n#> Error in self$validate(amount): amount >= 0 is not TRUE\nPritesh$deposit(\"pizza\")\n#> Error in self$validate(amount): is.numeric(amount) is not TRUE\nPritesh$withdraw(-54)\n#> Error in self$validate(amount): amount >= 0 is not TRUE\nPritesh <- bankAccountStrict$new(name = \"Pritesh\", balance = -45)\n#> Error in self$validate(balance): amount >= 0 is not TRUE\nbankAccountFee <- R6::R6Class(\n  \"bankAccountFee\",\n  inherit = bankAccount,\n  public = list(\n    withdraw = function(amount) {\n      # use method from superclass\n      super$withdraw(amount)\n      \n      if (self$balance < 0) {\n        cat(\"\\nI am charging you 10 euros for overdrawing.\\n\")\n        self$balance = self$balance - 10\n        invisible(self)\n      }\n    }\n  )\n)\n\n# create an instance of an object\nMangesh <- bankAccountFee$new(name = \"Mangesh\", balance = 100)\n\nMangesh\n#> Dear Mangesh, your balance is: 100\n\n# do deposits and withdrawals to see if the balance changes\nMangesh$deposit(20)\n#> Current balance is: 100\n#> And you are depositing:  20\n\nMangesh\n#> Dear Mangesh, your balance is: 120\n\nMangesh$withdraw(150)\n#> Current balance is: 120\n#> And you are withdrawing: 150\n#> \n#> I am charging you 10 euros for overdrawing.\n\nMangesh\n#> Dear Mangesh, your balance is: -40\n\n# make sure input validation checks work\nMangesh$deposit(-20)\n#> Error in self$validate(amount): amount >= 0 is not TRUE\nMangesh$deposit(\"pizza\")\n#> Error in self$validate(amount): is.numeric(amount) is not TRUE\nMangesh$withdraw(-54)\n#> Error in self$validate(amount): amount >= 0 is not TRUE\nMangesh <- bankAccountFee$new(name = \"Mangesh\", balance = -45)\n#> Error in self$validate(balance): amount >= 0 is not TRUE"}]
